func printLn(msg : String) -> Unit
{
  print(msg);
  print(toString('\n'))
}

role DP
role K
role KP
role C


newtype d(Bool)
newtype k(Bool)
newtype c(Bool)


protocol Streaming
  = rec(l)
  . DP ==> K | d(Bool)
  . KP ==> K | k(Bool)
  . K  ==> C | c(Bool)
  . call(l)

func inc (counter : &Int) -> Unit
{
  mut(counter, add(!counter,1))
}

session streamK
        <Streaming as K>
        () -> Unit
{
  var counter = 1
; loop(l)
  {
    recv[d] DP
    {
      when d(b)
      {
        print("Received from DP: ")
      ; printLn(toString(b))
      ; recv[k] KP
        {
          when k(d)
          {
            print("Received from KP: ")
          ; printLn(toString(b))
          ; send[c] C c(or(b,d))
              catch { printLn("Crash on send!"); crash(unit) }
            print("Sent to C: ")
          ; printLn(toString(or(b,d)))
          ; inc(counter)
          ; call(l)
          }
        } catch { printLn("Crash on recv k!"); crash(unit) }
      }
    } catch { printLn("Crash on recv d!"); print(toString(!counter)); printLn(" iterations performed, failing gracefully"); crash(unit) }
  }
}

func coordinate(dp : String, kp : String, c : String) -> Unit
{
  run streamK()
    with [DP as dp, KP as kp, C as c]
}

main (args : [String])
{
  print("My First Program")
; print(toString('\n'))
; coordinate("python3 dp.py", "python3 kp.py", "python3 c.py")
; printLn("Exiting normally.")
}
