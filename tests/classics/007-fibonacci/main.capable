func printLn(msg : String) -> Unit { print(msg);  print(toString('\n')) }

role A
role B

union num   { num : Int  }

union cmd   { fibonacci  : Int
            ; stop       : Unit
            }

union ack { ack : String }

protocol Fibonacci
    = rec(x)
    . A ==> B [cmd] { fibonacci(Int) . B ==> A [num] { num(Int).call(x) }
                    | stop(Unit) . end
                    }

union MaybeAnswer { crashed : Unit; result : Int }

session fibA <Fibonacci as A>(fib : Int) -> MaybeAnswer
{
  loop (x){

    print("Sending message: ");
    printLn(toString(fib));

    send[cmd] B fibonacci(fib) catch { printLn("Crashing on Send"); crash(crashed(unit)) }

    recv[num] B {
        when num(i)
        {
        print("Received message: ");
        printLn(toString(i));
        call(x)
        }
    } catch { printLn("Crashing on Recv"); crash(crashed(unit)) }
  }
}

session fibB <Fibonacci as B>() -> Bool
{
  loop(x)
  {
    recv[cmd] A
    {
      when fibonacci(i)
      {
        send[num] A num(1) catch { printLn("Crashing on Send"); crash(false) }
        printLn(toString(1));
        call(x)
      }
      when stop(u) { end(true) }
    } catch { printLn("Crashing on Recv"); crash(false) }
  }
}

main (args : [String])
{
  printLn("My First Session-Typed Interaction")
}
