func printLn(msg : String) -> Unit { print(msg);  print(toString('\n')) }

role A
role B

newtype num(Int)
newtype ack(String)

union cmd {
  fibonacci  : Int;
  stop       : Unit
}


protocol Fibonacci
    = rec(x)
    . A ==> B [cmd]
      { fibonacci(Int)
        . B ==> A | num(Int)
        . call(x)
      | stop(Unit)
        . end
      }

union MaybeAnswer { crashed : Unit; result : Int }

session fibA <Fibonacci as A>(fib : Int) -> MaybeAnswer
{
  var cnt = 1
; var payload = fib
; loop (x)
  {
    if eq(!cnt,10)
    {
      printLn("Stopping at tenth iteration.")
    ; send[cmd] B stop(unit)
        catch { printLn("Crashing on Send"); crash(crashed(unit)) }
      end(result(!payload))
    }
      else
    {
      print("Fibbing: ")
    ; printLn(toString(!payload))
    ; send[cmd] B fibonacci(!payload)
        catch { printLn("Crashing on Send"); crash(crashed(unit)) }
      recv[num] B
      {
        when num(i)
        {
          mut(cnt,add(!cnt,1))
        ; mut(payload,i)
        ; call(x)
        }
      } catch { printLn("Crashing on Recv"); crash(crashed(unit)) }
    }
  }
}

session fibB <Fibonacci as B>() -> Bool
{
  loop(x)
  {
    recv[cmd] A
    {
      when fibonacci(i)
      {
        send[num] A num(1) catch { printLn("Crashing on Send"); crash(false) }
        printLn(toString(1));
        call(x)
      }
      when stop(u) { end(true) }
    } catch { printLn("Crashing on Recv"); crash(false) }
  }
}

main (args : [String])
{
  printLn("My First Session-Typed Interaction")
; match run fibA(1) with [B as "python3 fib.py"]
  {
    when crashed(u) { printLn("Ooops we crashed!") }
    when result(i)  { print("Last One was: "); printLn(toString(i)) }
  }
}
