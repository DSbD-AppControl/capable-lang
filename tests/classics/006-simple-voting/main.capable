func printLn(msg : String) -> Unit { print(msg);  print(toString('\n')) }

role Voter
role Server

newtype token(String)

union auth {
 ok     : Unit;
 reject : Unit
}

union vote {
  yes : Unit;
  no  : Unit
}

newtype result(Int)

union MaybeResult { crashed : Unit; rej : Unit; res : Int }

protocol SimpleVoting
  = Voter  ==> Server | token(String)
  . Server ==> Voter  [auth]
      { ok(Unit)
        . Voter ==> Server [vote]
          { yes(Unit)
            . Server ==> Voter | result(Int)
            . end
          | no(Unit)
            . Server ==> Voter | result(Int)
            . end
          }
      | reject(Unit)
        . end
      }

session voter <SimpleVoting as Voter> (pwd : String,b : Bool) -> MaybeResult
{
  send[token] Server token(pwd) catch { crash(crashed(unit)) }
  recv [auth] Server
  {
    when ok(u)
    {
      if b
      {
         send[vote] Server yes(unit) catch { crash(crashed(unit)) }
         recv[result] Server
         {
           when result(i)
           {
              end(res(i))
           }
         } catch { crash(crashed(unit)) }
      }
      else
      {
         send[vote] Server no(unit) catch { crash(crashed(unit)) }
         recv[result] Server
         {
           when result(i)
           {
              end(res(i))
           }
         } catch { crash(crashed(unit)) }
      }
    }
    when reject(u)
    {
      end(rej(unit))
    }
  } catch { crash(crashed(unit)) }
}


session vote_server <SimpleVoting as Server> () -> Bool
{
  recv[token] Voter
  {
    when token(str)
    {
      if eq(str,"password")
      {
        send [auth] Voter ok(unit) catch { crash(false) }
        recv [vote] Voter
        {
          when yes(u)
          {
            send [result] Voter result(1) catch { crash(false) }
            end(true)
          }
          when no(u)
          {
            send [result] Voter result(0) catch { crash(false) }
            end(true)
          }
        } catch { crash(false) }
      } else {
        send [auth] Voter reject(unit) catch { crash(false) }
        end(true)
      }
    }
  } catch { crash(false) }
}

func runVote(pword : String,b : Bool) -> Unit
{
  match run voter(pword,b) with [Server as "python3 server.py"]
  {
    when crashed(u) { printLn("Ooops we crashed!") }
    when rej(u)  { printLn("Rejected") }
    when res(i)  { print("Result: "); printLn(toString(i)) }
  }
}
main (args : [String])
{
  printLn("My First Program")

; printLn(" Reviewer A True")
; runVote("Reviewer A", true)

; printLn(" Reviewer A False")
; runVote("Reviewer A", false)

; printLn(" Reviewer B True")
; runVote("Reviewer B", true)

; printLn(" Reviewer B False")
; runVote("Reviewer B", false)
}
