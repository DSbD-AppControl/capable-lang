role C  -- Client
role I  -- Instrument the client wants to use
role A  -- Agent that negotiates with the client the conditions of use of the instrument

newtype request(Unit)
newtype connect(Unit)
newtype available(Unit)
newtype ack(Unit)
newtype terms(String)
newtype proposition(String)

union reply { accept : Unit ; counter : String}

newtype start(Unit)
newtype result(String)
newtype wait(Unit)

union cmd { abort : Unit ; command : String }

protocol negotiation
  = C ==> A | request(Unit)
  . A ==> I | connect(Unit)
  . I ==> A | available(Unit)
  . A ==> C | ack(Unit)
  . A ==> C | terms(String)
  . rec(X)
    . C ==> A | proposition(String)
    . A ==> C [reply]
      { accept(Unit)
        . A ==> I | start(Unit)
        . rec(Y)
          . C ==> I [cmd]
            { abort(Unit)
              . end
            | command(String)
              . I ==> C | result(String)
              . call(Y)

            }
      | counter(String)
        . A ==> I | wait(Unit)
        . call(X)
      }

main (args : [String])
{
  print("My First Program")
; print(toString('\n'))

}
