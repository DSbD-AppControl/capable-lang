union MaybeInt { nout : Unit; this : String}

func printLn(msg : String) -> Unit
{
  print(msg);
  print(toString('\n'))
}

role Client
role Server

newtype msg(String)

protocol Echo
  = Client ==> Server | msg(String)
  . Server ==> Client | msg(String)
  . end

session echoClient <Echo as Client>(i : String) -> MaybeInt
{
  print("Sending message: ");
  printLn(i);

  send[msg] Server msg(i) catch { printLn("Crashing on Send"); crash(nout(unit)) }

  recv[msg] Server {
    when msg(i)
    {
       print("Received message: ");
       printLn(i);

       end(this(i))
    }
  } catch { printLn("Crashing on Recv"); crash(nout(unit)) }
}

-- ### Program Entry Point
main (args : [String])
{
  local val = "Hello World";

  -- Run a session, assigning processes to roles.
  match run echoClient(val) with [Server as "python3 pingping.py" ]
  {
    when nout(val) { printLn("Oops we crashed!") }
    when this(val) { print("We echoed this, successfully: "); printLn(toString(val)) }
  }
}

-- [ EOF ]
