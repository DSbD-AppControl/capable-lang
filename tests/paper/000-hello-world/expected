Running Test
# Finished Parsing
# Finished Type Checking
# Executing
```
1
2
Hello World
```
# Finished
# Finished Parsing
# Finished Type Checking
```
\begin{VerbatimInline}
\CapableKeyword{type} \CapableBound{point} = \CapableType{struct} \{\CapableBound{x} : \CapableType{Int}; \CapableBound{y} : \CapableType{Int}\}
\CapableKeyword{type} \CapableBound{either} = \CapableType{union} \{\CapableBound{left} : \CapableType{String}; \CapableBound{right} : \CapableType{Int}\}
\CapableKeyword{func} \CapableBound{printLn} (\CapableBound{str} : \CapableType{String}) -> \CapableType{Unit}
\{
  \CapableKeyword{print}(\CapableBound{str});
  \CapableKeyword{print}(\CapableKeyword{toString}(\CapableValue{'\textbackslash{}n'}))
\}
\CapableKeyword{func} \CapableBound{setVarX} (\CapableBound{p} : &\CapableType{\CapableBound{point}}, \CapableBound{x} : \CapableType{Int}) -> \CapableType{Unit}
\{
  \CapableKeyword{mut}(\CapableBound{p}, \CapableBound{set\_x}(\CapableKeyword{!}\CapableBound{p}, \CapableBound{x}))
\}
\CapableBound{main} (\CapableBound{args} : \CapableType{[}\CapableType{String}\CapableType{]}) -> \CapableType{Unit}
\{
  \CapableKeyword{val} \CapableBound{p} = \CapableBound{point}(\CapableValue{1}, \CapableValue{2}) ;
  \CapableBound{printLn}(\CapableKeyword{toString}(\CapableBound{get\_x}(\CapableKeyword{!}\CapableBound{p})));
  \CapableBound{setVarX}(\CapableBound{p}, \CapableValue{2});
  \CapableBound{printLn}(\CapableKeyword{toString}(\CapableBound{get\_x}(\CapableKeyword{!}\CapableBound{p})));
  \CapableKeyword{local} \CapableBound{x} = \CapableBound{left}(\CapableValue{"Hello World"}) ;
  \CapableKeyword{match} \CapableBound{x}
  \{
    \CapableKeyword{when} \CapableBound{left}(\CapableBound{x})
    \{
      \CapableBound{printLn}(\CapableBound{x})
    \}
    \CapableKeyword{when} \CapableBound{right}(\CapableBound{y})
    \{
      \CapableBound{printLn}(\CapableKeyword{toString}(\CapableBound{y}))
    \}
  \}
\}
\end{VerbatimInline}

```
