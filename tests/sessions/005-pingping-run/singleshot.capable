-- ## Utilities
--
-- We are in a featherweight language that has no concept of:
--
-- + modules/imports;
-- + polymorphism;
--
-- So we have some utilities for making writing program's better.
--

type MaybeInt = union { nout : Unit; this : Int}

func printLn(msg : String) -> Unit
{
  print(msg);
  print(toString('\n'))
}

-- ## A Ping Pong Protocol
--
-- Here is our set fo flagship protocols: Echo!

-- ### Roles
--
-- First we define some roles to make endpoints discernable.
--
role Client
role Server

-- ### Messages
--
-- Messages need to be labelled.
--
-- Our language supports _Tagged Unions_, which provide a source of
-- message labels.
--

type msg = union { msg : Int }

-- ### Actions
--
-- We now define our global multiparty session types.
--

protocol Echo
  = Client ==> Server [msg] { msg(Int)
  . Server ==> Client [msg] { msg(Int)
  . end
  }}

-- ### Implementation
--
-- We now define a realisation of an Echo Client.
--
session echoClient <Echo as Client>(i : Int) -> MaybeInt
{

  -- Send message to server if comms crash then return (0)
  print("Sending message: ");
  printLn(toString(i));

  send[msg] Server msg(i) catch { printLn("Crashing on Send"); crash(nout(unit)) }

  -- Recv message from server, if comms crash then return (0)
  recv[msg] Server {
    when msg(i)
    {
       print("Received message: ");
       printLn(toString(i));

       end(this(i))
    }
  } catch { printLn("Crashing on Recv"); crash(nout(unit)) }
}

-- ### Program Entry Point
main (args : [String])
{
  printLn("My First Session-Typed Interaction");

  local val = 2;

  -- Run a session, assigning processes to roles.
  local res : MaybeInt = run echoClient(val) with [Server as "python3 pingping.py" ];

  match res
  {
    when nout(i) { printLn("Oops we crashed!") }
    when this(i) { print("We echoed this, successfully: "); printLn(toString(i)) }
  }

}

-- [ EOF ]
