role Alice
role Bob
role Charlie

type foo = String

union syn { syn : Int }

union synack1 { synack  : (Int,Int)     }
union synack2 { synack2 : (Int,Int,Int) }
union fin     { fin     : (Int,Int,Int) }
union finE    { finE    : Int ; restart : Unit}

protocol handshake
  = Alice   ==> Bob     [syn]     { syn(Int)
  . Bob     ==> Charlie [syn]     { syn(Int)
  . Charlie ==> Bob     [synack1] { synack((Int,Int))
  . Bob     ==> Alice   [synack2] { synack2((Int,Int,Int))
  . Alice   ==> Bob     [fin]     { fin((Int,Int,Int))
  . Bob     ==> Charlie [fin]     { fin((Int,Int,Int))
  . end
  }}}}}}

protocol forever
  = rec(x). Alice ==> Bob   [syn]  { syn(Int)
          . Bob   ==> Alice [finE] { finE(Int).end
                                   | restart(Unit).call(x)
          }}

main (args : [String])
{
  print("My First Program")
; print(toString('\n'))

}
