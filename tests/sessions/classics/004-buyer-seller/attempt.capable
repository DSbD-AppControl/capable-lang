role B
role S


union cmd     { product : String
              ; accept  : String
              ; quit    : Unit  
              }
union price   {price    : Int}
union quote   {quote    : String}
union payment {payment  : Int}


protocol BuyerSeller = 
    rec(X) . B ==> S [cmd] {
        product (String) . S ==> B [price] {price (Int) . S ==> B [quote] { quote (String) . call (X) }}
    |   accept  (String) . B ==> S [payment] {payment (Int) . call (X)}
    |   quit    (Unit)   . end
    }

func printLn(msg : String) -> Unit
{
  print(msg);
  print(toString('\n'))
}

session buyerSellerB <BuyerSeller as B> () -> Bool
{
    loop(X){
        printLn("Checking if counter is less than 10");
        print("Sending quit");
        send[cmd] S quit(unit) catch { printLn("Crashing on Last send"); crash(false) }
        end(true)
    }
}


session buyerSellerS <BuyerSeller as S> () -> Bool
{
    loop(X){
        recv [cmd] B {
            when product(i) {
                print("Received product request: ");
                printLn(toString(i));
                send [price] B price (1) catch { crash(false) }
                send [quote] B quote ("4") catch { crash(false) }
                call (X)
            }
            when accept(i) {
                print("Received message: ");
                printLn(toString(i));
                recv[payment] B {
                    when payment(p){
                        call (X)
                    }
                } catch { printLn("Crashing on Recv"); crash(false) }
            }
            when quit(unit) {
                printLn("Quitting");
                end(true)
            }
        } catch { printLn("Crashing on Recv"); crash(false) }
    }
}

main (args : [String])
{
  printLn("My First Program")

}