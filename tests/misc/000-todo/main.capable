type a = Int
type b = Char
type c = String
type d = Int
type e = Unit
type f = Bool
type fa = FILE
type fb = PROC

type g = [3;Bool]
type ga = [3;[5;Bool]]

type h = union { left:Bool; goo:Int}
type i = (Bool,Int)

type k = union {this:[3;Bool]; that:[5;String]}

func foo() -> Int
{
  1
}

func foobar(c : Bool, eek : Int) -> Int
{
  local x = if c
            {
              eek
            } else
            {
              local f = "1"
            ; 1
            }
;
  x
}


func barfoo() -> Unit
{
  print("Hello")
}


func fb() -> Unit
{
  local x = tuple("a","stre")
;
  print(project[0](x))
; print(project[1](x))

}


func bf() -> Unit
{
  local x : union { left:String; right:Int } = tag[left]("String")
; match x
  {
    when left(y)
    {
       print("aa")
    }
    when right(z)
    {
       print("aaa")
    }
  }
}


main()
{
  local b = tuple(1,2)
--  local a = index(b,1);
--  local c = cond(b,1,2);
; unit
}
